package main

import (
	"encoding/csv"
	"fmt"
	"os"
	"reflect"
	"strings"
)

func main() {

	// Open the first file
	file, err := os.Open("data.data")
	if err != nil {
		panic(err)
	}
	defer file.Close()

	// solving problem1
	reader := csv.NewReader(file)
	reader.FieldsPerRecord = -1
	var matrix [][]string
	var row_index int = 0

	// :) padding :)
	matrix = append(matrix, []string{})
	matrix = append(matrix, []string{})
	matrix = append(matrix, []string{})
	matrix = append(matrix, []string{})

	for {
		row_pad := []string{"*", "*", "*", "*"}
		// read row in from csv file
		row, err := reader.Read()
		if err != nil {
			break
		}

		row_pad = append(row_pad, strings.Split(row[0], "")...)
		row_pad = append(row_pad, []string{"*", "*", "*", "*"}...)

		matrix = append(matrix, row_pad)

		row_pad = []string{}
		row_index += 1
	}

	matrix = append(matrix, []string{})
	matrix = append(matrix, []string{})
	matrix = append(matrix, []string{})
	matrix = append(matrix, []string{})

	var total int = 0

	x_mas_slice := []string{"X", "M", "A", "S"}
	x_max_invert_slice := []string{"S", "A", "M", "X"}

	// row
	for i := 4; i < len(matrix[0])-4; i++ {
		// col
		for j := 4; j < len(matrix)-4; j++ {

			// horizontal case
			var horizontal_slice []string = matrix[i][j : j+4]
			if reflect.DeepEqual(horizontal_slice, x_mas_slice) || reflect.DeepEqual(horizontal_slice, x_max_invert_slice) {
				fmt.Println("Horizontal", horizontal_slice, "row:", i-4, "col", j-4)
				total += 1
			}
			// vertical case
			var vertical_slice []string = []string{matrix[i][j], matrix[i+1][j], matrix[i+2][j], matrix[i+3][j]}
			if reflect.DeepEqual(vertical_slice, x_mas_slice) || reflect.DeepEqual(vertical_slice, x_max_invert_slice) {
				fmt.Println("vertical", vertical_slice, "row:", i-4, "col", j-4)
				total += 1
			}
			// tilted up case
			var titled_slice_up []string = []string{matrix[i][j], matrix[i+1][j+1], matrix[i+2][j+2], matrix[i+3][j+3]}
			if reflect.DeepEqual(titled_slice_up, x_mas_slice) || reflect.DeepEqual(titled_slice_up, x_max_invert_slice) {
				fmt.Println("tilted up", titled_slice_up, "row:", i-4, "col", j-4)
				total += 1
			}
			// tilted down case
			var titled_slice_down []string = []string{matrix[i][j], matrix[i-1][j+1], matrix[i-2][j+2], matrix[i-3][j+3]}
			if reflect.DeepEqual(titled_slice_down, x_mas_slice) || reflect.DeepEqual(titled_slice_down, x_max_invert_slice) {
				fmt.Println("tilted down", titled_slice_down, "row:", i-4, "col", j-4)
				total += 1
			}
			// fmt.Print(matrix[current_point[0]:current_point[1]])
			// fmt.Println(i-4, j-4, matrix[i][j])

		}

	}
	fmt.Println(total)
}
